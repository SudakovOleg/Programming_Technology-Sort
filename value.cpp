/*TODO:
 * Дописать операцию =
*/
#include "value.h"

//Стандартный конструктор
Value::Value()
{
    //Стандартно имеем 0 разрядов
    //Ждем вызова метода инициализации
    n = 0;
}

//Метод инициализации, принимает число разрядов
void Value::Init(int r)
{
    //Устанавливаем разрядность
    n = r;
    //Выделяем память под строку
    val = new char[n];
    clear();
}

//Метод получения одного из разрядов
//Принимает номер разряда
//Возврощает число из разряда
int Value::getChar(int r)
{
    if(r < n && r > -1)
    {
        return val[r];
    }
    else
    {
        return 0;
    }
}

//Метод для добавления строки
//Принимает адрес строки
void Value::push(char* _temp)
{
    //Кладем строку
    for(int i(0); i < n; i++)
    {
        val[i] = _temp[i];
    }
}

//Метод возвращения всей строки
char *Value::pop()
{
    return val;
}

//Метод очистки строки
void Value::clear()
{
    //Заполняем строку нуль-символом
    for(int i(0); i < n; i++)
    {
        val[i] = '\0';
    }
}

//Диструктор
Value::~Value()
{
    //Обнуляем переменные, очищаем память
    n = 0;
    delete []val;
}

/*
    P.S: Защита от чисел бо'льшего разряда также реализована в коде
    Если при максимуме разрядов "2", придет 234, то в строку попадет
    лишь 23.
*/
